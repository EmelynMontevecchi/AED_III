//OP_1

#include <stdio.h>
#include <stdlib.h>

typedef struct nodo {
    int valor;
    struct nodo* esq;
    struct nodo* dir;
} Nodo;

Nodo* criarNodo(int v) {
    Nodo* p = (Nodo*)malloc(sizeof(Nodo));
    p->valor = v;
    p->esq = NULL;
    p->dir = NULL;
    return p;
}

Nodo* inserirNodo(Nodo* p, int v) {
    Nodo* novo = criarNodo(v);
    if (!p)
        return novo;
    else {
        if (v <= p->valor)
            p->esq = inserirNodo(p->esq, v);
        else
            p->dir = inserirNodo(p->dir, v);
        return p;
    }
}

Nodo* encontrarMinimo(Nodo* p) {
    while (p->esq != NULL)
        p = p->esq;
    return p;
}

Nodo* excluirNodo(Nodo* p, int v) {
    if (p == NULL)
        return p;

    if (v < p->valor)
        p->esq = excluirNodo(p->esq, v);
    else if (v > p->valor)
        p->dir = excluirNodo(p->dir, v);
    else {
        if (p->esq == NULL) {
            Nodo* temp = p->dir;
            free(p);
            return temp;
        } else if (p->dir == NULL) {
            Nodo* temp = p->esq;
            free(p);
            return temp;
        }

        Nodo* temp = encontrarMinimo(p->dir);
        p->valor = temp->valor;
        p->dir = excluirNodo(p->dir, temp->valor);
    }
    return p;
}

Nodo* buscarNodo(Nodo* p, int v) {
    if (p == NULL || p->valor == v)
        return p;

    if (v < p->valor)
        return buscarNodo(p->esq, v);
    else
        return buscarNodo(p->dir, v);
}

void mostrar(Nodo* p, int nivel) {
    if (p == NULL) {
        for (int i = 0; i < nivel; i++)
            printf("    ");
        printf("#\n");
        return;
    }

    mostrar(p->dir, nivel + 1);

    for (int i = 0; i < nivel; i++)
        printf("    ");

    printf("%i\n", p->valor);

    mostrar(p->esq, nivel + 1);
}

void liberarArvore(Nodo* p) {
    if (p != NULL) {
        liberarArvore(p->esq);
        liberarArvore(p->dir);
        free(p);
    }
}

int main() {
    Nodo* raiz = NULL;
    int v, op;
    op = 1;

    while (op != 0) {
        printf("\n\n\n\n\n");
        mostrar(raiz, 0);
        printf("\nOpcoes:\n");
        printf("1 - inserir nodo\n");
        printf("2 - excluir nodo\n");
        printf("3 - buscar\n");
        printf("0 - sair\n");
        printf("op: ");
        scanf("%i", &op);

        switch (op) {
            case 1:
                printf("Informe o valor (int): ");
                scanf("%i", &v);
                raiz = inserirNodo(raiz, v);
                break;
            case 2:
                printf("Informe o valor a ser excluido (int): ");
                scanf("%i", &v);
                raiz = excluirNodo(raiz, v);
                break;
            case 3:
                printf("Informe o valor a ser buscado (int): ");
                scanf("%i", &v);
                Nodo* resultado = buscarNodo(raiz, v);
                if (resultado)
                    printf("Valor encontrado: %i\n", resultado->valor);
                else
                    printf("Valor nao pertence a arvore.\n");
                break;
            case 0:
                printf("Saindo...\n");
                break;
            default:
                printf("Opcao invalida\n");
        }
    }

    // Liberar memória da árvore antes de sair
    liberarArvore(raiz);
    return 0;
}
----------------------------------------------------------------------------------------------------------------------------------------------------------------------
//OP_2

#include <stdio.h>
#include <stdlib.h>

typedef struct nodo {
    int valor;
    struct nodo* esq;
    struct nodo* dir;
} Nodo;

Nodo* criarNodo(int v) {
    Nodo* p = (Nodo*)malloc(sizeof(Nodo));
    p->valor = v;
    p->esq = NULL;
    p->dir = NULL;
    return p;
}

Nodo* inserirNodo(Nodo* p, int v) {
    if (!p)
        return criarNodo(v);

    if (v <= p->valor)
        p->esq = inserirNodo(p->esq, v);
    else
        p->dir = inserirNodo(p->dir, v);

    return p;
}

Nodo* encontrarMaximo(Nodo* p) {
    while (p->dir != NULL)
        p = p->dir;
    return p;
}

Nodo* excluirNodo(Nodo* p, int v) {
    if (p == NULL)
        return p;

    if (v < p->valor)
        p->esq = excluirNodo(p->esq, v);
    else if (v > p->valor)
        p->dir = excluirNodo(p->dir, v);
    else {
        if (p->esq == NULL) {
            Nodo* temp = p->dir;
            free(p);
            return temp;
        } else if (p->dir == NULL) {
            Nodo* temp = p->esq;
            free(p);
            return temp;
        }

        Nodo* temp = encontrarMaximo(p->esq);
        p->valor = temp->valor;
        p->esq = excluirNodo(p->esq, temp->valor);
    }
    return p;
}

Nodo* buscarNodo(Nodo* p, int v) {
    if (p == NULL || p->valor == v)
        return p;

    if (v < p->valor)
        return buscarNodo(p->esq, v);
    else
        return buscarNodo(p->dir, v);
}

void mostrar(Nodo* p, int nivel) {
    int n = nivel;
    if (!p) {
        while (n > 0) {
            printf("   ");
            n--;
        }
        printf("#\n");
    } else {
        while (n > 0) {
            printf("   ");
            n--;
        }
        printf("%i\n", p->valor);
        nivel++;
        mostrar(p->esq, nivel);
        mostrar(p->dir, nivel);
    }
}

int main() {
    Nodo* raiz = NULL;
    int v, op;
    op = 1;
    while (op != 0) {
        mostrar(raiz, 0);
        printf("Opcoes:\n");
        printf("1 - inserir nodo\n");
        printf("2 - excluir nodo\n");
        printf("3 - buscar\n");
        printf("0 - sair\n");
        printf("op: ");
        scanf("%i", &op);

        switch (op) {
        case 1:
            printf("Informe o valor (int): ");
            scanf("%i", &v);
            raiz = inserirNodo(raiz, v);
            break;
        case 2:
            printf("Informe o valor (int): ");
            scanf("%i", &v);
            raiz = excluirNodo(raiz, v);
            break;
        case 3:
            printf("Informe o valor (int): ");
            scanf("%i", &v);
            Nodo* resultado = buscarNodo(raiz, v);
            if (resultado)
                printf("Valor encontrado");
            else
                printf("Valor nao pertence a arvore.\n");
            break;
        case 0:
            printf("saindo...\n");
            break;
        default:
            printf("opcao invalida\n");
        }
        printf("\n\n\n\n\n");
    }
    return 0;
}
