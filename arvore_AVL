#include <stdio.h>
#include <stdlib.h>

typedef struct nodo {
    int valor;
    struct nodo* esq;
    struct nodo* dir;
    struct nodo* pai;
    int h;
} Nodo;

Nodo* criarNodo(int v);
Nodo* buscar(Nodo* raiz, int v);
void mostrarArvore(Nodo* p, int nivel);
Nodo* inserirNodo(Nodo* raiz, int v);
Nodo* excluir(Nodo* raiz, int v);
int fb(Nodo* p);
Nodo* rotEsq(Nodo* raiz);
Nodo* rotDir(Nodo* raiz);
Nodo* rotEsqDir(Nodo* raiz);
Nodo* rotDirEsq(Nodo* raiz);
Nodo* balancear(Nodo* raiz);

Nodo* criarNodo(int v) {
    Nodo* p = (Nodo*)malloc(sizeof(Nodo));
    p->valor = v;
    p->esq = NULL;
    p->dir = NULL;
    p->pai = NULL;
    p->h = 0;
    return p;
}

int fb(Nodo* p) {

    if (!p->esq && !p->dir) {
      p->h = 1;
    } else if (!p->esq) {
      p->h = p->dir->h+1;
    } else if (!p->dir) {
      p->h = p->esq->h+1;
    } else {
      if (p->esq->h > p->dir->h) {
        p->h = p->esq->h + 1;
      } else
        p->h = p->dir->h+1;
    }
    int alturaEsq = p->esq ? p->esq->h : 0;
    int alturaDir = p->dir ? p->dir->h : 0;
    return alturaEsq - alturaDir;
}

Nodo* rotEsq(Nodo* raiz);{
Nodo *q, *temp;
q = p->esq;
temp = q->dir;
q->dir = p;
p->esq = temp;
p = q;
}

Nodo* rotDir(Nodo* raiz){
Nodo *q, *temp;
q = p->dir;
temp = q->esq;
q->esq = p;
p->dir = temp;
p = q;
}

Nodo* rotEsqDir(Nodo* raiz){
rot_esq(p->esq);
rot_dir(p);
}

Nodo* rotDirEsq(Nodo* raiz){
rot_dir(p->dir);
rot_esq(p);
}

Nodo* balancear(Nodo* raiz) {
    int balance = fb(raiz);

    if (balance >= 2) {
        // Desbalanceamento à esquerda
        if (fb(raiz->esq) >= 0)
            return rotDir(raiz); // Rotação simples à direita (RR)
        else
            return rotEsqDir(raiz); // Rotação dupla à esquerda-direita (LR)
    } else if (balance <= -2) {
        // Desbalanceamento à direita
        if (fb(raiz->dir) <= 0)
            return rotEsq(raiz); // Rotação simples à esquerda (LL)
        else
            return rotDirEsq(raiz); // Rotação dupla à direita-esquerda (RL)
    }
  fb(raiz);
    return raiz;
}

void mostraArvore(Nodo* p, int nivel) {
    int i;
    if (p) {
        mostraArvore(p->dir, nivel + 1);
        printf("\n");
        for (i = 0; i < nivel; i++)
            printf("\t");
        printf("%i [%i|%i]\n", p->valor, p->h, fb(p));
        mostraArvore(p->esq, nivel + 1);
    }
}

Nodo* inserirNodo(Nodo* raiz, int v) {
    if (!raiz) {
        raiz = criarNodo(v);
    } else {
        if (v <= raiz->valor) {
            raiz->esq = inserirNodo(raiz->esq, v);
            raiz->esq->pai = raiz;
        } else {
            raiz->dir = inserirNodo(raiz->dir, v);
            raiz->dir->pai = raiz;
        }
    }
    raiz = balancear(raiz);
    return raiz;
}

Nodo* buscar(Nodo* raiz, int v) {
    if (raiz) {
        if (v == raiz->valor) {
            return raiz;
        } else if (v < raiz->valor) {
            return buscar(raiz->esq, v);
        } else
            return buscar(raiz->dir, v);
    } else
        return NULL;
}

Nodo* buscarMenor(Nodo* raiz) {
    Nodo* atual = raiz;
    while (atual->esq)
        atual = atual->esq;
    return atual;
}
/*
SE FOR VAZIO NAO BALANCEAR 
*/

Nodo* excluirNodo(Nodo* p, int v) {
    if (p == NULL)
        return p;

    if (v < p->valor)
        p->esq = excluirNodo(p->esq, v);
    else if (v > p->valor)
        p->dir = excluirNodo(p->dir, v);
    else {
        if (p->esq == NULL) {
            Nodo* temp = p->dir;
            free(p);
            return temp;
        } else if (p->dir == NULL) {
            Nodo* temp = p->esq;
            free(p);
            return temp;
        }

        Nodo* temp = encontrarMaximo(p->esq);
        p->valor = temp->valor;
        p->esq = excluirNodo(p->esq, temp->valor);
    }
    return p;
}
int main() {
    Nodo* raiz = NULL;
    int op, v;

    do {
        mostraArvore(raiz, 0);
        printf("\n--------------------------------------------------\n");
        printf("1 - inserir novo nodo\n");
        printf("2 - excluir nodo\n");
        printf("3 - buscar nodo\n");
        printf("0 - sair\n");
        printf("opcao: ");
        scanf("%d", &op);

        switch (op) {
        case 1:
            printf("Informe o valor (int): ");
            scanf("%d", &v);
            raiz = inserirNodo(raiz, v);
            break;
        case 2:
            printf("Informe o valor (int): ");
            scanf("%d", &v);
            //raiz = excluir(raiz, v);
            break;
        case 3:
            printf("Informe o valor (int): ");
            scanf("%d", &v);
            if (buscar(raiz, v))
                printf("valor encontrado\n");
            else
                printf("valor nao pertence a arvore\n");
            break;
        case 0:
            printf("saindo...\n");
            break;
        default:
            printf("opcao invalida\n");
        }
        printf("\n\n\n");
    } while (op != 0);

    return 0;
}
